---
export interface Props {
  title?: string;
  size: number;
}

const { title, size } = Astro.props as Props;

const hour = new Date().getHours() % 12;
const minute = new Date().getMinutes();

let hourRotation = (360 / 12) * hour;
let minuteRotation = (360 / 60) * minute;
---

<script>
  document.addEventListener("astro:page-load", () => {
    function setTime() {
      const hour = new Date().getHours() % 12;
      const minute = new Date().getMinutes();

      document.querySelectorAll(".hours").forEach((hourHandDOM) => {
        hourHandDOM.setAttribute("transform", `rotate(${(360 / 12) * hour})`);
      });
      document.querySelectorAll(".minutes").forEach((minuteHandDOM) => {
        minuteHandDOM.setAttribute(
          "transform",
          `rotate(${(360 / 60) * minute})`
        );
      });
    }
    setTime();
    setTimeout(setTime, 10 * 1000);
  });
</script>

<svg
  class="clock"
  width={200 * size}
  height={200 * size}
  viewBox="-100 -100 200 200"
>
  <title>{title}</title>
  <rect x="-100" y="-100" width="200" height="200" fill="#CD803D"></rect>

  <circle r="55" stroke="#FCCE7B" stroke-width="10" fill="white"></circle>
  <circle
    r="45"
    stroke="#B6705F"
    stroke-width="6"
    stroke-dasharray="6 17.56194490192345"
    stroke-dashoffset="3"
    fill="none"></circle>
  <g stroke="#5f4c6c" stroke-linecap="round">
    <line
      class="hours"
      y2="-20"
      stroke-width="8"
      transform={`rotate(${hourRotation})`}></line>
    <line
      class="minutes"
      y2="-35"
      stroke-width="6"
      transform={`rotate(${minuteRotation})`}></line>
  </g>
</svg>
