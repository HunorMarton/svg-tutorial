@use "sass:meta";
@use 'sass:list';
@use 'sass:math';

$numberOfSlides: 31;

// Generate keyframe animations for a property over a set of values
@mixin keyframes($name, $property, $values) {
    @if meta.variable-exists("slide") != true {
        @error "Variable $slide must be defined before including this mixin.";
    }

    @keyframes slide-#{$slide}-#{$name} {
        0% {
            // Generate starting value based on first value in list
            @include property($property, nth($values, 1));
        }
        @for $index from 1 through length($values) {
            // Generate keyframe for each value in list
            $value: nth($values, $index);
            @include keyframe($property, $value, $index - 1);
        }
        100% {
            // Generate starting value based on last value in list
            @include property($property, nth($values, -1));
        }
    }
}

@mixin keyframe($property, $value, $offset) {
    $percentagePerSlide: math.div(100%, $numberOfSlides);
    $currentSlide: $slide + $offset;

    $percentage: $percentagePerSlide * $currentSlide;

    // @debug "slide: #{$slide}, currentSlide: #{$currentSlide}, percentage: #{$percentage}";

    // Animation starts 30% after the slide starts and ends 30% before the slide ends
    $stillPercentage: $percentagePerSlide * 0.3;

    /*
    $percentage: $percentage - $stillPercentage;

    #{math.max($percentage, 0%)} {
        @include property($property, $value);
    }

    $percentage: $percentage + $stillPercentage;

    #{math.min($percentage, 100%)} {
        @include property($property, $value);
    }
    */

    #{$percentage} {
        @include property($property, $value);
    }
}

@mixin property($property, $value) {
    #{$property}: if($property==top, top($value), $value);
}

@function top($value) {
    @return calc(var(--line-height) * $value);
}

