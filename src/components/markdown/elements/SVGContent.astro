{
  /* 
    We render the SVG twice. 
    This is to achieve a similar effect as increasing the z-index property of an image element on hover. 
    Unfortunately we can't modify the z-index in SVG, so instead we have a passthrough and by default hidden highlight layer on top of the original image.
    On hovering an image element in the base layer, we display the corresponding image element from the highlight layer (which will appear on top)
    */
}
<g class="svg-base">
  <slot />
</g>
<g class="svg-highlight">
  <slot />
</g>

<style is:global lang="scss">
  @import "SVGContent";

  .svg-base .coordinates {
    display: none;
  }

  .svg-highlight use {
    display: none;
  }

  .svg-highlight * {
    pointer-events: none; /* It's always the base layer that should be interacted with */
  }

  .svg-highlight .element {
    display: none;

    > *:first-child {
      stroke: black;
      stroke-width: calc(2 * var(--zoom));
      stroke-dasharray: calc(5 * var(--zoom)) calc(5 * var(--zoom));
    }

    /* Select filled elements */
    > *:first-child[fill]:not([fill="none"]) {
      fill: rgb(255 255 255 / 0.75);
    }

    /* Select non-filled elements */
    > *:first-child:not([fill]),
    > *:first-child[fill="none"] {
      fill: transparent;
    }
  }

  /* If it has a direct child that is hovered */
  .svg-base:has(.element:hover) {
    /* Once an SVG element is hovered, turn its base element to transparent */
    .element:hover {
      @include selectedSVGBase();
    }

    /* If an SVG element is selected turn every other base element into a wireframe */
    .element:not(:hover) {
      @include otherSVGBase();
    }

    use {
      display: none; /* There doesn't seem to be a way to change the style of a use element so hide it entirely */
    }
  }

  /* 
  Once a base element is hovered, display the corresponding highlight element as a skeleton 
  Corresponding highlight elements are necessary to be able to display it on top of the other elements (there's no z-index in SVG)

  This whole '* >' part is specifically for the 'transform' chapter that nests elements into groups
  */
  /* prettier-ignore */
  @for $i from 1 through 4 {
    .svg-base:has(> .element:nth-child(#{$i}):hover) + .svg-highlight > .element:nth-child(#{$i}),
    .svg-base:has(> * > .element:nth-child(#{$i}):hover) + .svg-highlight > * > .element:nth-child(#{$i}),
    .svg-base:has(> * > * > .element:nth-child(#{$i}):hover) + .svg-highlight > * >  * > .element:nth-child(#{$i}),
    .svg-base:has(> * > * > * > .element:nth-child(#{$i}):hover) + .svg-highlight > * >  * > * > .element:nth-child(#{$i}),
    .svg-base:has(> * > * > * > * > .element:nth-child(#{$i}):hover) + .svg-highlight > * >  * > * > * > .element:nth-child(#{$i}),
    .svg-base:has(> * > * > * > * > * > .element:nth-child(#{$i}):hover) + .svg-highlight > * >  * > * > * > * > .element:nth-child(#{$i}),
    .svg-base:has(> * > * > * > * > * > * > .element:nth-child(#{$i}):hover) + .svg-highlight > * >  * > * > * > * > * > .element:nth-child(#{$i}),
    .svg-base:has(> * > * > * > * > * > * > * > .element:nth-child(#{$i}):hover) + .svg-highlight > * >  * > * > * > * > * > * > .element:nth-child(#{$i}),
    .svg-base:has(> * > * > * > * > * > * > * > * > .element:nth-child(#{$i}):hover) + .svg-highlight > * >  * > * > * > * > * > * > * > .element:nth-child(#{$i}) {
      display: block;
    }
  }
</style>
