---
import Coordiante from "./Coordinate.astro";

export interface Props {
  d: string;
  [key: string]: string;
}

const { d, ...props } = Astro.props as Props;

const commands = d.split(/(?=[MLCQAZ])/i);
const coordinates: [string, string][] = [];

commands.forEach((command) => {
  const type = command[0];
  const args = command
    .slice(1)
    .trim()
    .split(/[\s,]+/);

  switch (type.toUpperCase()) {
    case "M":
      coordinates.push([args[0], args[1]]);
      break;
    case "L":
      coordinates.push([args[0], args[1]]);
      break;
    case "C":
      coordinates.push([args[0], args[1]]);
      coordinates.push([args[2], args[3]]);
      coordinates.push([args[4], args[5]]);
      break;
    case "Q":
      coordinates.push([args[0], args[1]]);
      coordinates.push([args[2], args[3]]);
      break;
    case "A":
      coordinates.push([args[5], args[6]]);
      break;
  }
});
---

<g>
  <path d={d} {...props}></path>
  <g class="coordinates">
    {coordinates.map(([x, y]) => <Coordiante x={x} y={y} />)}
  </g>
</g>
