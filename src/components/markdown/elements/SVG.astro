---
import SVGGrid from "./SVGGrid.astro";
import SVGContent from "./SVGContent.astro";

export interface Props {
  width: string;
  height: string;
  viewBox: string;
  showAxes?: boolean;
  baseTranslation?: [number, number];
  translation?: [number, number];
  baseRotation?: number;
  rotation?: number;
  [key: string]: any;
}

const { width, height, viewBox, showAxes, translation, rotation, ...props } =
  Astro.props as Props;

const [minX, minY, viewBoxWidth, viewBoxHeight] = viewBox
  ? viewBox.split(" ").map(Number)
  : [0, 0, Number(width), Number(height)];

const zoom = viewBoxWidth / Number(width);
---

<div class="svg-container">
  <div class="svg-viewbox-values">
    <span>{!translation && !rotation && `${minX}, ${minY}`}</span>
    <span></span>
  </div>
  <svg width={width} height={height} viewBox={viewBox} {...props}>
    <SVGGrid
      viewBoxWidth={viewBoxWidth}
      viewBoxHeight={viewBoxHeight}
      zoom={Number(width) / viewBoxWidth}
      showAxes={showAxes}
      baseTranslation={Astro.props.baseTranslation}
      translation={Astro.props.translation}
      baseRotation={Astro.props.baseRotation}
      rotation={Astro.props.rotation}
    />
    <SVGContent>
      <slot />
    </SVGContent>
  </svg>
  <div class="svg-viewbox-values">
    <span></span>
    <span>{viewBoxWidth}, {viewBoxHeight}</span>
  </div>
</div>

<style is:global define:vars={{ width, zoom }}>
  .svg-container {
    width: calc(var(--width) * 1px);
  }

  .svg-viewbox-values {
    display: flex;
    justify-content: space-between;
    font-size: 0.7em;
    color: gray;
  }
</style>
