---
export interface Props {
  simplified?: boolean;
  size: number;
}

const { simplified, size = 1 } = Astro.props as Props;
const backgroundColor = simplified ? "#34C58B" : "#7b0828"; // 419D78, 5FAD56
const handColor = simplified ? "black" : "white";
const scale = simplified ? 0.85 : 1;
---

<svg
  class={`clock ${simplified ? "simplified" : ""}`}
  width={200 * size}
  height={200 * size}
  viewBox="-100 -100 200 200"
>
  <circle class="minute_marker" r={90 * scale} pathLength="60"></circle>
  <circle class="hour_marker" r={90 * scale} pathLength="60"></circle>
  {!simplified && <text id="text" class="text" x="45" y="5" />}

  <g id="hour_hand">
    <line class="hand" y2={-45 * scale}></line>
    <line class="hand hand--thick" y1="-12" y2={-45 * scale}></line>
  </g>

  <g id="minute_hand">
    <line class="hand" y2={-75 * scale}></line>
    <line class="hand hand--thick" y1="-12" y2={-75 * scale}></line>
  </g>

  <g id="second_hand">
    <line class="hand hand--second" y1="12" y2={-75 * scale}></line>
  </g>

  <circle class="center" r={3}></circle>
</svg>

<script>
  document.addEventListener("astro:page-load", () => {
    /*
  
      Learn how to code this watch step by step on YouTube:
  
      https://www.youtube.com/watch?v=ULomsOSk4JA
  
      Follow me on twitter for more: https://twitter.com/HunorBorbely
  
      */

    const textElement = document.getElementById("text");
    const hoursElement = document.getElementById("hour_hand");
    const minutesElement = document.getElementById("minute_hand");
    const secondsElement = document.getElementById("second_hand");

    let showDate = true;

    function animate() {
      if (!hoursElement) return;
      if (!minutesElement) return;
      if (!secondsElement) return;

      const date = new Date();

      const day = date.getDate();
      const ampm = date.getHours() >= 12 ? "PM" : "AM";
      const hour = date.getHours() + date.getMinutes() / 60;
      const minute = date.getMinutes() + date.getSeconds() / 60;
      const second = date.getSeconds() + date.getMilliseconds() / 1000;

      if (textElement) textElement.textContent = showDate ? `${day}` : ampm;
      hoursElement.setAttribute("transform", `rotate(${(360 / 12) * hour})`);
      minutesElement.setAttribute(
        "transform",
        `rotate(${(360 / 60) * minute})`
      );
      secondsElement.setAttribute(
        "transform",
        `rotate(${(360 / 60) * second})`
      );

      requestAnimationFrame(animate);
    }

    requestAnimationFrame(animate);

    textElement?.addEventListener("mousedown", () => {
      showDate = !showDate;
    });
  });
</script>

<style define:vars={{ backgroundColor, handColor }}>
  .clock {
    background-color: var(--backgroundColor);
  }

  .hour_marker {
    fill: transparent;
    stroke: black;
    stroke-width: 10;
  }

  svg:not(.simplified) .hour_marker {
    stroke: #f0f0c9;
    stroke-width: 10;
    stroke-dasharray: 0.2, 4.8;
    stroke-dashoffset: 0.1;
  }

  .minute_marker {
    fill: transparent;
    stroke: black;
    stroke-width: 7;
  }

  svg:not(.simplified) .minute_marker {
    stroke: #0f0e0e;
    stroke-width: 7;
    stroke-dasharray: 0.2, 0.8;
    stroke-dashoffset: 0.1;
  }

  .hand {
    stroke: var(--handColor);
    stroke-width: 2;
    stroke-linecap: round;
  }

  .hand--thick {
    stroke-width: 7;
  }

  .hand--second {
    stroke: white;
    opacity: 0.8;
  }

  .center {
    fill: var(--backgroundColor);
    stroke-width: 2;
    stroke: white;
  }

  .text {
    fill: #f0f0c9;
    text-anchor: middle;
    cursor: pointer;
    user-select: none;
  }
</style>
