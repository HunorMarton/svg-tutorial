@use "sass:meta";
@use 'sass:list';
@use 'sass:math';

// Counter to make UUIDs unique
$counter: 0;

// Function that gives back a unique ID
@function _unique-id() {
    $counter: $counter + 1 !global;
    @return $counter;
}

@mixin _keyframes($name, $animations) {
    @if meta.variable-exists("container") != true {
        @error "Variable $container must be defined before including this mixin.";
    }
    @if meta.variable-exists("slides") != true {
        @error "Variable $slides must be defined before including this mixin.";
    }

    // Default values
    @each $property, $values in $animations {
        @include property($property, nth($values, 1));
    }

    // Keyframes for each other value
    $percentagePerSlide: math.div(100%, $slides - 1);

    @keyframes animation-#{$container}-#{$name} {
        @for $index from 2 through $slides - 1 {
            $percentage: $percentagePerSlide * ($index - 1);

            #{$percentage} {
                @each $property, $values in $animations {
                    @if($index <= length($values)) {
                        $value: nth($values, $index);
                        @include property($property, $value);
                    }
                }
            }
        }

        100% {
            // Generate starting value based on last value in list
            @each $property, $values in $animations {
                @include property($property, nth($values, -1));
            }
        }
    }
}

@mixin animations($animations) {
    position: relative;
    animation-timeline: --container-#{$container};
    animation-range: contain 0% contain 100%;
    animation-fill-mode: forwards;

    $uuid: _unique-id();
    
    @include _keyframes($uuid, $animations);

    animation-name: animation-#{$container}-#{$uuid};
}

@mixin animation($property, $values) {
    @include animations((#{$property}: $values));
}

@mixin property($property, $value) {
    #{$property}: if($property==top, top($value), $value);
}

@function top($value) {
    @return calc(var(--line-height) * $value);
}
