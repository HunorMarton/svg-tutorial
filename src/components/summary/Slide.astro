---
export interface Props {
  container: string;
  slides?: number;
  code?: boolean;
}

const { container, slides = 1, code } = Astro.props as Props;

const background = code ? "#24292e" : "transparent";
---

<div
  class="slide-container"
  data-container={container}
  style={{
    "view-timeline": container ? `--container-${container} block` : "none",
  }}
>
  <div class="slide-content">
    <slot />
  </div>
  {
    Array.from({ length: slides }).map(() => (
      <div class="slide-snapper">Slide</div>
    ))
  }
</div>

<style define:vars={{ background, slides }}>
  .slide-container {
    width: 100vw;
    height: calc(var(--slides) * 100vh);
    box-sizing: border-box;

    background-color: var(--background);

    scroll-snap-align: start;
    scroll-snap-type: y mandatory;
  }

  .slide-content {
    position: sticky;
    top: 0;
    width: 100vw;
    height: 100vh;
    box-sizing: border-box;

    display: flex;
    justify-content: center;
    align-items: center;
  }

  .slide-container:nth-of-type(3) {
    .slide-content {
      overflow-x: hidden;
    }
  }

  .slide-snapper {
    color: transparent;
    /* color: pink; */
    /* outline: 1px solid teal; */
    width: 100vw;
    height: 100vh;
    box-sizing: border-box;
    pointer-events: none;

    position: relative;
    top: -100vh;

    scroll-snap-align: center;
  }
</style>

<style is:global>
  .slide-container .slide-content .embed pre {
    border-radius: 0;
    height: 230px;
    min-height: 230px; /* TODO: Do this in a nicer way without global CSS */
  }
</style>
